import { AAAARecord, AnyDNSRecord, ARecord, NAPTRRecord, PromiseResolver, ResolveOptions, SOARecord, SRVRecord } from "./dns.js";
import { RecordType } from "./constants.js";
export interface BaseResolver extends PromiseResolver {
}
export declare abstract class BaseResolver implements PromiseResolver {
    private readonly _timeout;
    protected servers: string[];
    constructor(options?: {
        timeout: number;
    });
    _pending: Set<AbortController>;
    cancel(): void;
    protected _fetch(resource: string, options?: RequestInit): Promise<Response>;
    setLocalAddress(ipv4: string, ipv6: string): void;
    getServers(): string[];
    setServers(servers: string[]): void;
    abstract resolve(hostname: string, rrtype?: (keyof typeof RecordType) | 'ANY', options?: ResolveOptions): Promise<any>;
    resolve4(hostname: string, options: {
        ttl: true;
    }): Promise<ARecord[]>;
    resolve4(hostname: string, options?: {
        ttl: false;
    }): Promise<string[]>;
    resolve6(hostname: string, options: {
        ttl: true;
    }): Promise<AAAARecord[]>;
    resolve6(hostname: string, options?: {
        ttl: false;
    }): Promise<string[]>;
    resolveAny(hostname: string): Promise<AnyDNSRecord[]>;
    resolveCaa(hostname: string): Promise<{
        critical: number;
        iodef?: string;
        issue?: string;
    }[]>;
    resolveCname(hostname: string): Promise<string[]>;
    resolveMx(hostname: string): Promise<{
        priority: number;
        exchange: string;
    }[]>;
    resolveNaptr(hostname: string): Promise<NAPTRRecord[]>;
    resolveNs(hostname: string): Promise<string[]>;
    resolvePtr(hostname: string): Promise<string[]>;
    resolveSoa(hostname: string): Promise<SOARecord>;
    resolveSrv(hostname: string): Promise<SRVRecord[]>;
    resolveTxt(hostname: string): Promise<string[][]>;
    reverse(hostname: string): Promise<string[]>;
}
