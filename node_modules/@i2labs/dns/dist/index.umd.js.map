{"version":3,"file":"index.umd.js","sources":["../src/constants.ts","../src/dns.ts","../src/base_resolver.ts","../src/rfc_rdata.ts","../src/rfc1035.ts","../src/rfc8484.ts","../src/index.ts"],"sourcesContent":["export enum RecordType {\n    'A' = 1,    // a host address     [RFC1035]\n    'NS' = 2,    // an authoritative name server     [RFC1035]\n    'MD' = 3,    // a mail destination (OBSOLETE - use MX)     [RFC1035]\n    'MF' = 4,    // a mail forwarder (OBSOLETE - use MX)     [RFC1035]\n    'CNAME' = 5,    // the canonical name for an alias     [RFC1035]\n    'SOA' = 6,    // marks the start of a zone of authority     [RFC1035]\n    'MB' = 7,    // a mailbox domain name (EXPERIMENTAL)     [RFC1035]\n    'MG' = 8,    // a mail group member (EXPERIMENTAL)     [RFC1035]\n    'MR' = 9,    // a mail rename domain name (EXPERIMENTAL)     [RFC1035]\n    'NULL' = 10,    // a null RR (EXPERIMENTAL)     [RFC1035]\n    'WKS' = 11,    // a well known service description     [RFC1035]\n    'PTR' = 12,    // a domain name pointer     [RFC1035]\n    'HINFO' = 13,    // host information     [RFC1035]\n    'MINFO' = 14,    // mailbox or mail list information     [RFC1035]\n    'MX' = 15,    // mail exchange     [RFC1035]\n    'TXT' = 16,    // text strings     [RFC1035]\n    'RP' = 17,    // for Responsible Person     [RFC1183]\n    'AFSDB' = 18,    // for AFS Data Base location     [RFC1183][RFC5864]\n    'X25' = 19,    // for X.25 PSDN address     [RFC1183]\n    'ISDN' = 20,    // for ISDN address     [RFC1183]\n    'RT' = 21,    // for Route Through     [RFC1183]\n    'NSAP' = 22,    // for NSAP address, NSAP style A record     [RFC1706][RFC1348]\n    'NSAP-PTR' = 23,    // for domain name pointer, NSAP style     [RFC1348][RFC1637][RFC1706]\n    'SIG' = 24,    // for security signature     [RFC4034][RFC3755][RFC2535][RFC2536][RFC2537][RFC2931][RFC3110][RFC3008]\n    'KEY' = 25,    // for security key     [RFC4034][RFC3755][RFC2535][RFC2536][RFC2537][RFC2539][RFC3008][RFC3110]\n    'PX' = 26,    // X.400 mail mapping information     [RFC2163]\n    'GPOS' = 27,    // Geographical Position     [RFC1712]\n    'AAAA' = 28,    // IP6 Address     [RFC3596]\n    'LOC' = 29,    // Location Information     [RFC1876]\n    'NXT' = 30,    // Next Domain (OBSOLETE)     [RFC3755][RFC2535]\n    'EID' = 31,    // Endpoint Identifier     [Michael_Patton][http://ana-3.lcs.mit.edu/~jnc/nimrod/dns.txt]         1995-06\n    'NIMLOC' = 32,    // Nimrod Locator     [1][Michael_Patton][http://ana-3.lcs.mit.edu/~jnc/nimrod/dns.txt]         1995-06\n    'SRV' = 33,    // Server Selection     [1][RFC2782]\n    'ATMA' = 34,    // ATM Address     [ ATM Forum Technical Committee, \"ATM Name System, V2.0\", Doc ID: AF-DANS-0152.000, July 2000. Available from and held in escrow by IANA.]\n    'NAPTR' = 35,    // Naming Authority Pointer     [RFC2915][RFC2168][RFC3403]\n    'KX' = 36,    // Key Exchanger     [RFC2230]\n    'CERT' = 37,    // CERT     [RFC4398]\n    'A6' = 38,    // A6 (OBSOLETE - use AAAA)     [RFC3226][RFC2874][RFC6563]\n    'DNAME' = 39,    // DNAME     [RFC6672]\n    'SINK' = 40,    // SINK     [Donald_E_Eastlake][http://tools.ietf.org/html/draft-eastlake-kitchen-sink]         1997-11\n    'OPT' = 41,    // OPT     [RFC6891][RFC3225]\n    'APL' = 42,    // APL     [RFC3123]\n    'DS' = 43,    // Delegation Signer     [RFC4034][RFC3658]\n    'SSHFP' = 44,    // SSH Key Fingerprint     [RFC4255]\n    'IPSECKEY' = 45,    // IPSECKEY     [RFC4025]\n    'RRSIG' = 46,    // RRSIG     [RFC4034][RFC3755]\n    'NSEC' = 47,    // NSEC     [RFC4034][RFC3755]\n    'DNSKEY' = 48,    // DNSKEY     [RFC4034][RFC3755]\n    'DHCID' = 49,    // DHCID     [RFC4701]\n    'NSEC3' = 50,    // NSEC3     [RFC5155]\n    'NSEC3PARAM' = 51,    // NSEC3PARAM     [RFC5155]\n    'TLSA' = 52,    // TLSA     [RFC6698]\n    'SMIMEA' = 53,    // S/MIME cert association     [RFC8162]     SMIMEA/smimea-completed-template     2015-12-01\n    // 'Unassigned1' = 54,\n    'HIP' = 55,     // Host Identity Protocol     [RFC8005]\n    'NINFO' = 56,    // NINFO     [Jim_Reid]     NINFO/ninfo-completed-template     2008-01-21\n    'RKEY' = 57,    // RKEY     [Jim_Reid]     RKEY/rkey-completed-template     2008-01-21\n    'TALINK' = 58,    // Trust Anchor LINK     [Wouter_Wijngaards]     TALINK/talink-completed-template     2010-02-17\n    'CDS' = 59,    // Child DS     [RFC7344]     CDS/cds-completed-template     2011-06-06\n    'CDNSKEY' = 60,    // DNSKEY(s) the Child wants reflected in DS     [RFC7344]         2014-06-16\n    'OPENPGPKEY' = 61,    // OpenPGP Key     [RFC7929]     OPENPGPKEY/openpgpkey-completed-template     2014-08-12\n    'CSYNC' = 62,    // Child-To-Parent Synchronization     [RFC7477]         2015-01-27\n    'ZONEMD' = 63,    // message digest for DNS zone     [draft-wessels-dns-zone-digest]     ZONEMD/zonemd-completed-template     2018-12-12\n    'SVCB' = 64,       // https://tools.ietf.org/id/draft-nygren-dnsop-svcb-httpssvc-00.html\n    'HTTPSSVC' = 65,       // https://tools.ietf.org/id/draft-nygren-dnsop-svcb-httpssvc-00.html\n    // 'Unassigned2' = 64-98,\n    'SPF' = 99,         // [RFC7208] https://tools.ietf.org/html/rfc4408\n    'UINFO' = 100,    // [IANA-Reserved]\n    'UID' = 101,    // [IANA-Reserved]\n    'GID' = 102,    // [IANA-Reserved]\n    'UNSPEC' = 103,    // [IANA-Reserved]\n    'NID' = 104,    // [RFC6742]     ILNP/nid-completed-template\n    'L32' = 105,    // [RFC6742]     ILNP/l32-completed-template\n    'L64' = 106,    // [RFC6742]     ILNP/l64-completed-template\n    'LP' = 107,    // [RFC6742]     ILNP/lp-completed-template\n    'EUI48' = 108,    // an EUI-48 address     [RFC7043]     EUI48/eui48-completed-template     2013-03-27\n    'EUI64' = 109,    // an EUI-64 address     [RFC7043]     EUI64/eui64-completed-template     2013-03-27\n    // 'Unassigned3' = 110-248,    // TKEY     249     Transaction Key     [RFC2930]\n    'TSIG' = 250,    // Transaction Signature     [RFC2845]\n    'IXFR' = 251,    // incremental transfer     [RFC1995]\n    'AXFR' = 252,    // transfer of an entire zone     [RFC1035][RFC5936]\n    'MAILB' = 253,    // mailbox-related RRs (MB, MG or MR)     [RFC1035]\n    'MAILA' = 254,    // mail agent RRs (OBSOLETE - see MX)     [RFC1035]\n    '*' = 255,    // A request for some or all records the server has available     [RFC1035][RFC6895][RFC8482]\n    'URI' = 256,    // URI     [RFC7553]     URI/uri-completed-template     2011-02-22\n    'CAA' = 257,    // Certification Authority Restriction     [RFC8659]     CAA/caa-completed-template     2011-04-07\n    'AVC' = 258,    // Application Visibility and Control     [Wolfgang_Riedel]     AVC/avc-completed-template     2016-02-26\n    'DOA' = 259,    // Digital Object Architecture     [draft-durand-doa-over-dns]     DOA/doa-completed-template     2017-08-30\n    'AMTRELAY' = 260,    // Automatic Multicast Tunneling Relay     [RFC-ietf-mboned-driad-amt-discovery-13]     AMTRELAY/amtrelay-completed-template     2019-02-06\n    // 'Unassigned4' = 261-32767,\n    'TA' = 32768,   // DNSSEC Trust Authorities     [Sam_Weiler][http://cameo.library.cmu.edu/][ Deploying DNSSEC Without a Signed Root. Technical Report 1999-19, Information Networking Institute, Carnegie Mellon University, April 2004.]         2005-12-13\n    'DLV' = 32769,    // DNSSEC Lookaside Validation (OBSOLETE)     [RFC-ietf-dnsop-obsolete-dlv-02][RFC4431]\n    // 'Unassigned5' = 32770-65279,    // Private use     65280-65534\n    // 'Reserved' = 65535,\n}\n\n// Each DNS query can return one of the following error codes:\nexport const NODATA = 'NODATA';                // DNS server returned answer with no data.\nexport const FORMERR = 'FORMERR';                // DNS server claims query was misformatted.\nexport const SERVFAIL = 'SERVFAIL';            // DNS server returned general failure.\nexport const NOTFOUND = 'NOTFOUND';            // Domain name not found.\nexport const NOTIMP = 'NOTIMP';                // DNS server does not implement requested operation.\nexport const REFUSED = 'REFUSED';            // DNS server refused query.\nexport const BADQUERY = 'BADQUERY';            // Misformatted DNS query.\nexport const BADNAME = 'BADNAME';            // Misformatted host name.\nexport const BADFAMILY = 'BADFAMILY';            // Unsupported address family.\nexport const BADRESP = 'BADRESP';            // Misformatted DNS reply.\nexport const CONNREFUSED = 'CONNREFUSED';        // Could not contact DNS servers.\nexport const TIMEOUT = 'TIMEOUT';            // Timeout while contacting DNS servers.\nexport const EOF = 'EOF';                // End of file.\nexport const FILE = 'FILE';                // Error reading file.\nexport const NOMEM = 'NOMEM';                // Out of memory.\nexport const DESTRUCTION = 'DESTRUCTION';        // Channel is being destroyed.\nexport const BADSTR = 'BADSTR';            // Misformatted string.\nexport const BADFLAGS = 'BADFLAGS';            // Illegal flags specified.\nexport const NONAME = 'NONAME';            // Given host name is not numeric.\nexport const BADHINTS = 'BADHINTS';            // Illegal hints flags specified.\nexport const NOTINITIALIZED = 'NOTINITIALIZED';    // c-ares library initialization not yet performed.\nexport const LOADIPHLPAPI = 'LOADIPHLPAPI';        // Error loading iphlpapi.dll.\nexport const ADDRGETNETWORKPARAMS = 'ADDRGETNETWORKPARAMS';// Could not find GetNetworkParams function.\nexport const CANCELLED = 'CANCELLED';            // DNS query cancelled.\n\nexport type ErrorCode =\n    'NODATA'\n    | 'FORMERR'\n    | 'SERVFAIL'\n    | 'NOTFOUND'\n    | 'NOTIMP'\n    | 'REFUSED'\n    | 'BADQUERY'\n    | 'BADNAME'\n    | 'BADFAMILY'\n    | 'BADRESP'\n    | 'CONNREFUSED'\n    | 'TIMEOUT'\n    | 'EOF'\n    | 'FILE'\n    | 'NOMEM'\n    | 'DESTRUCTION'\n    | 'BADSTR'\n    | 'BADFLAGS'\n    | 'NONAME'\n    | 'BADHINTS'\n    | 'NOTINITIALIZED'\n    | 'LOADIPHLPAPI'\n    | 'ADDRGETNETWORKPARAMS'\n    | 'CANCELLED';\n","import {ErrorCode, RecordType} from \"./constants.js\";\nimport * as constants from \"./constants.js\";\n\nexport type DNSRecord = {}\n\nexport interface AnyDNSRecord {\n    type: string;\n}\n\nexport interface ARecord extends DNSRecord {\n    address: string;\n    ttl: number;\n}\n\nexport interface AnyARecord extends ARecord {\n    type: 'A';\n}\n\nexport interface AAAARecord extends DNSRecord {\n    address: string;\n    ttl: number;\n}\n\nexport interface AnyAAAARecord extends AAAARecord {\n    type: 'AAAA';\n}\n\nexport interface CNAMERecord extends DNSRecord {\n    value: string;\n}\n\nexport interface AnyCNAMERecord extends CNAMERecord {\n    type: 'CNAME';\n}\n\nexport interface CAARecord extends DNSRecord {\n    critical: number;\n    iodef?: string;\n    issue?: string;\n}\n\nexport interface AnyCAARecord extends CAARecord {\n    type: 'CAA';\n}\n\nexport interface NSRecord extends DNSRecord {\n    value: string;\n}\n\nexport interface AnyNSRecord extends NSRecord {\n    type: 'NS';\n}\n\nexport interface PTRRecord extends DNSRecord {\n    value: string;\n}\n\nexport interface AnyPTRRecord extends PTRRecord {\n    type: 'PTR';\n}\n\nexport interface TXTRecord extends DNSRecord {\n    entries: string[];\n}\n\nexport interface AnyTXTRecord extends TXTRecord {\n    type: 'TXT';\n}\n\nexport interface MXRecord extends DNSRecord {\n    priority: number;\n    exchange: string;\n}\n\nexport interface AnyMXRecord extends MXRecord {\n    type: 'MX';\n}\n\nexport interface NAPTRRecord extends DNSRecord {\n    order: number;\n    preference: number;\n    flags: string;\n    service: string;\n    regexp: string;\n    replacement: string;\n}\n\nexport interface AnyNAPTRRecord extends NAPTRRecord {\n    type: 'NAPTR';\n}\n\nexport interface SOARecord extends DNSRecord {\n    nsname: string;\n    hostmaster: string;\n    serial: number;\n    refresh: number;\n    retry: number;\n    expire: number;\n    minttl: number;\n}\n\nexport interface AnySOARecord extends SOARecord {\n    type: 'SOA';\n}\n\nexport interface SRVRecord extends DNSRecord {\n    priority: number;\n    weight: number;\n    port: number;\n    name: string;\n}\n\nexport interface AnySRVRecord extends SRVRecord {\n    type: 'SRV';\n}\n\nexport class DNSError extends Error {\n    code: ErrorCode;\n    constructor(message: string, code: ErrorCode) {\n        super(message);\n        this.code = code;\n    }\n\n    static readonly NODATA = new DNSError('DNS server returned answer with no data', constants.NODATA);\n    static readonly FORMERR = new DNSError('DNS server claims query was misformatted', constants.FORMERR);\n    static readonly SERVFAIL = new DNSError('DNS server returned general failure', constants.SERVFAIL);\n    static readonly NOTFOUND = new DNSError('Domain name not found', constants.NOTFOUND);\n    static readonly NOTIMP = new DNSError('DNS server does not implement requested operation', constants.NOTIMP);\n    static readonly REFUSED = new DNSError('DNS server refused query', constants.REFUSED);\n    static readonly BADQUERY = new DNSError('Misformatted DNS query', constants.BADQUERY);\n    static readonly BADNAME = new DNSError('Misformatted host name', constants.BADNAME);\n    static readonly BADFAMILY = new DNSError('Unsupported address family', constants.BADFAMILY);\n    static readonly BADRESP = new DNSError('Misformatted DNS reply', constants.BADRESP);\n    static readonly CONNREFUSED = new DNSError('Could not contact DNS servers', constants.CONNREFUSED);\n    static readonly TIMEOUT = new DNSError('Timeout while contacting DNS servers', constants.TIMEOUT);\n    static readonly EOF = new DNSError('End of file', constants.EOF);\n    static readonly FILE = new DNSError('Error reading file', constants.FILE);\n    static readonly NOMEM = new DNSError('Out of memory', constants.NOMEM);\n    static readonly DESTRUCTION = new DNSError('Channel is being destroyed', constants.DESTRUCTION);\n    static readonly BADSTR = new DNSError('Misformatted string', constants.BADSTR);\n    static readonly BADFLAGS = new DNSError('Illegal flags specified', constants.BADFLAGS);\n    static readonly NONAME = new DNSError('Given host name is not numeric', constants.NONAME);\n    static readonly BADHINTS = new DNSError('Illegal hints flags specified', constants.BADHINTS);\n    static readonly NOTINITIALIZED = new DNSError('c-ares library initialization not yet performed', constants.NOTINITIALIZED);\n    static readonly LOADIPHLPAPI = new DNSError('Error loading iphlpapi.dll', constants.LOADIPHLPAPI);\n    static readonly ADDRGETNETWORKPARAMS = new DNSError('Could not find GetNetworkParams function', constants.ADDRGETNETWORKPARAMS);\n    static readonly CANCELLED = new DNSError('DNS query cancelled', constants.CANCELLED);\n}\n\nexport type LookupCallback = (err?: DNSError, address?: string, family?: number) => void;\nexport type LookupCallbackAll = (err?: DNSError, addresses?: { address: string, family: number }[]) => void;\n\nexport interface Resolver {\n    // constructor(options?: { timeout: number });\n    cancel(): void;\n    setLocalAddress(ipv4: string, ipv6: string): void;\n    getServers(): string[];\n    setServers(servers: string[]): void;\n\n    resolve(hostname: string, callback: (err?: DNSError, records?: string[]) => void): void;\n    resolve(hostname: string, rrtype: \"A\"|\"AAAA\"|\"CNAME\"|\"NS\"|\"PTR\", callback: (err?: DNSError, records?: string[]) => void): void;\n    resolve(hostname: string, rrtype: 'ANY', callback: (err?: DNSError, records?: AnyDNSRecord[]) => void): void;\n    resolve(hostname: string, rrtype: 'CAA', callback: (err?: DNSError, records?: CAARecord[]) => void): void;\n    resolve(hostname: string, rrtype: 'MX', callback: (err?: DNSError, records?: MXRecord[]) => void): void;\n    resolve(hostname: string, rrtype: 'NAPTR', callback: (err?: DNSError, records?: NAPTRRecord[]) => void): void;\n    resolve(hostname: string, rrtype: 'SOA', callback: (err?: DNSError, records?: SOARecord) => void): void;\n    resolve(hostname: string, rrtype: 'SRV', callback: (err?: DNSError, records?: SRVRecord[]) => void): void;\n    resolve(hostname: string, rrtype: 'TXT', callback: (err?: DNSError, records?: string[][]) => void): void;\n\n    resolve4(hostname: string, callback: (err?: DNSError, address?: string[]) => void): void;\n    resolve4(hostname: string, options: { ttl: true }, callback: (err?: DNSError, address?: ARecord[]) => void): void;\n    resolve4(hostname: string, options: { ttl: false }, callback: (err?: DNSError, address?: string[]) => void): void;\n\n    resolve6(hostname: string, callback: (err?: DNSError, address?: string[]) => void): void;\n    resolve6(hostname: string, options: { ttl: true }, callback: (err?: DNSError, address?: AAAARecord[]) => void): void;\n    resolve6(hostname: string, options: { ttl: false }, callback: (err?: DNSError, address?: string[]) => void): void;\n\n    resolveAny(hostname: string, callback: (err?: DNSError, ret?: AnyDNSRecord[]) => void): void;\n    resolveCaa(hostname: string, callback: (err?: DNSError, records?: {critical: number, iodef?: string, issue?: string}[]) => void): void;\n    resolveCname(hostname: string, callback: (err?: DNSError, addresses?: string[]) => void): void;\n    resolveMx(hostname: string, callback: (err?: DNSError, addresses?: {priority: number, exchange: string}[]) => void): void;\n    resolveNaptr(hostname: string, callback: (err?: DNSError, addresses?: NAPTRRecord[]) => void): void;\n    resolveNs(hostname: string, callback: (err?: DNSError, addresses?: string[]) => void): void;\n    resolvePtr(hostname: string, callback: (err?: DNSError, addresses?: string[]) => void): void;\n    resolveSoa(hostname: string, callback: (err?: DNSError, address?: SOARecord) => void): void;\n    resolveSrv(hostname: string, callback: (err?: DNSError, addresses?: SRVRecord[]) => void): void;\n    resolveTxt(hostname: string, callback: (err?: DNSError, records?: string[][]) => void): void;\n    reverse(hostname: string, callback: (err?: DNSError, hostnames?: string[]) => void): void;\n}\n\nexport type ResolveOptions = {ttl?:boolean, raw?: boolean};\n\nexport interface PromiseResolver {\n    // constructor(options?: { timeout: number }): Resolver;\n    cancel(): void;\n    setLocalAddress(ipv4: string, ipv6: string): void;\n    getServers(): string[];\n    setServers(servers: string[]): void;\n\n    resolve(hostname: string, rrtype: \"ANY\", options?: {raw: false}): Promise<AnyDNSRecord[]>;\n    resolve(hostname: string, rrtype: \"CAA\", options?: {raw: false}): Promise<CAARecord[]>;\n    resolve(hostname: string, rrtype: \"MX\", options?: {raw: false}): Promise<MXRecord[]>;\n    resolve(hostname: string, rrtype: \"NAPTR\", options?: {raw: false}): Promise<NAPTRRecord[]>;\n    resolve(hostname: string, rrtype: \"SOA\", options?: {raw: false}): Promise<SOARecord>;\n    resolve(hostname: string, rrtype: \"SRV\", options?: {raw: false}): Promise<SRVRecord[]>;\n    resolve(hostname: string, rrtype: \"TXT\", options?: {raw: false}): Promise<string[][]>;\n    resolve(hostname: string, rrtype?: \"A\"|\"AAAA\"|\"CNAME\"|\"NS\"|\"PTR\", options?: {raw: false}): Promise<string[]>;\n    resolve(hostname: string, rrtype: keyof typeof RecordType, options: {raw: true}): Promise<any>;\n    resolve(hostname: string, rrtype: \"A\", options: {ttl:true, raw: false}): Promise<ARecord[]>;\n    resolve(hostname: string, rrtype: \"AAAA\", options: {ttl:true, raw: false}): Promise<AAAARecord[]>;\n\n    resolve4(hostname: string, options: { ttl: true }): Promise<ARecord[]>;\n    resolve4(hostname: string, options?: { ttl: false }): Promise<string[]>;\n\n    resolve6(hostname: string, options: { ttl: true }): Promise<AAAARecord[]>;\n    resolve6(hostname: string, options?: { ttl: false }): Promise<string[]>;\n\n    resolveAny(hostname: string): Promise<AnyDNSRecord[]>;\n    resolveCaa(hostname: string): Promise<{critical: number, iodef?: string, issue?: string}[]>;\n    resolveCname(hostname: string): Promise<string[]>;\n    resolveMx(hostname: string): Promise<{priority: number, exchange: string}[]>;\n    resolveNaptr(hostname: string): Promise<NAPTRRecord[]>;\n    resolveNs(hostname: string): Promise<string[]>;\n    resolvePtr(hostname: string): Promise<string[]>;\n    resolveSoa(hostname: string): Promise<SOARecord>;\n    resolveSrv(hostname: string): Promise<SRVRecord[]>;\n    resolveTxt(hostname: string): Promise<string[][]>;\n\n    reverse(hostname: string): Promise<string[]>;\n\n    // Not part of spec, but provided here to be hooked by CallbackResolver\n    lookup(hostname: string): Promise<{ address: string, family: number }>;\n    lookup(hostname: string, options: 4 | 6 | { family: 4 | 6 | 0, hints?: number, all?: boolean, verbatim?: boolean }): Promise<{ address: string, family: number } | { address: string, family: number }[]>;\n    lookupService(address: string, port: number): Promise<{hostname: string, service: string}>\n}\n","import {\n    AAAARecord, AnyDNSRecord,\n    ARecord, CAARecord,\n    CNAMERecord,\n    DNSError,\n    DNSRecord, MXRecord,\n    NAPTRRecord,\n    PromiseResolver, ResolveOptions,\n    SOARecord,\n    SRVRecord\n} from \"./dns.js\";\nimport {CANCELLED, NOTIMP, RecordType} from \"./constants.js\";\n\n// tslint:disable-next-line no-empty-interface\nexport interface BaseResolver extends PromiseResolver {} // Allows partial implementation of PromiseResolver in abstract class using declaration merging\nexport abstract class BaseResolver implements PromiseResolver {\n    private readonly _timeout: number = -1;\n    protected servers: string[];\n\n    constructor(options?: { timeout: number }) {\n        if (options) this._timeout = options.timeout;\n    }\n\n    _pending: Set<AbortController> = new Set();\n\n    cancel(): void {\n        for (const controller of this._pending) controller.abort();\n        this._pending.clear();\n    }\n\n    protected async _fetch(resource: string, options?: RequestInit): Promise<Response> {\n        const controller = new AbortController();\n        let id;\n        this._pending.add(controller);\n        if (this._timeout !== -1) id = setTimeout(() => controller.abort(), this._timeout);\n\n        try {\n            return await fetch(resource, {\n                ...options,\n                signal: controller.signal\n            });\n        } catch (e) {\n            if (e.name === 'AbortError') throw new DNSError('request was cancelled', CANCELLED);\n            throw(e);\n        } finally {\n            this._pending.delete(controller);\n            if (id) clearTimeout(id);\n        }\n    }\n\n    setLocalAddress(ipv4: string, ipv6: string): void {\n        // no-op\n    }\n\n    getServers(): string[] {\n        return this.servers;\n    }\n\n    setServers(servers: string[]): void {\n        if (servers.length === 0) throw new RangeError(\"At least one server is required\");\n        this.servers = servers;\n    }\n\n    abstract resolve(hostname: string, rrtype?: (keyof typeof RecordType) | 'ANY', options?: ResolveOptions): Promise<any>;\n\n    resolve4(hostname: string, options: { ttl: true }): Promise<ARecord[]>;\n    resolve4(hostname: string, options?: { ttl: false }): Promise<string[]>;\n    resolve4(hostname: string, options?: { ttl: boolean }): Promise<string[] | ARecord[]> {\n        return this.resolve(hostname, 'A', options);\n    }\n\n    resolve6(hostname: string, options: { ttl: true }): Promise<AAAARecord[]>;\n    resolve6(hostname: string, options?: { ttl: false }): Promise<string[]>;\n    resolve6(hostname: string, options?: { ttl: boolean }): Promise<string[] | AAAARecord[]> {\n        return this.resolve(hostname, 'AAAA', options);\n    }\n\n    resolveAny(hostname: string): Promise<AnyDNSRecord[]> {\n        return this.resolve(hostname, 'ANY');\n    }\n\n    resolveCaa(hostname: string): Promise<{ critical: number; iodef?: string; issue?: string }[]> {\n        return this.resolve(hostname, 'CAA');\n    }\n\n    resolveCname(hostname: string): Promise<string[]> {\n        return this.resolve(hostname, 'CNAME');\n    }\n\n    resolveMx(hostname: string): Promise<{ priority: number; exchange: string }[]> {\n        return this.resolve(hostname, 'MX');\n    }\n\n    resolveNaptr(hostname: string): Promise<NAPTRRecord[]> {\n        return this.resolve(hostname, 'NAPTR');\n    }\n\n    resolveNs(hostname: string): Promise<string[]> {\n        return this.resolve(hostname, 'NS');\n    }\n\n    resolvePtr(hostname: string): Promise<string[]> {\n        return this.resolve(hostname, 'PTR');\n    }\n\n    resolveSoa(hostname: string): Promise<SOARecord> {\n        return this.resolve(hostname, 'SOA');\n    }\n\n    resolveSrv(hostname: string): Promise<SRVRecord[]> {\n        return this.resolve(hostname, 'SRV');\n    }\n\n    resolveTxt(hostname: string): Promise<string[][]> {\n        return this.resolve(hostname, 'TXT');\n    }\n\n    reverse(hostname: string): Promise<string[]> {\n        throw DNSError.NOTIMP;\n    }\n}\n","import {RecordType} from \"./constants.js\";\nimport {Tokenizer, TokenType} from \"./rfc1035.js\";\n\ntype IP4ADDR = [number, number, number, number];\ntype IP6ADDR = [number, number, number, number, number, number, number, number];\n\nfunction IP4ADDR(d: Tokenizer): IP4ADDR {return (new Array(4)).fill(undefined).map(x=>Number(d.next('u8').value)) as IP4ADDR;}\nfunction IP6ADDR(d: Tokenizer): IP6ADDR {return (new Array(8)).fill(undefined).map(x=>Number(d.next('u16').value)) as IP6ADDR;}\nfunction EXP(d: Tokenizer): number {return d.next('u4').value as number * Math.pow(10, d.next('u4').value as number);}\n\ntype OPAQUE = ArrayBuffer;\ntype DOMAINNAME = string[];\nconst DOMAINNAME = 'string[]';\n\n\ntype _RRDataLayout = ((d: Tokenizer)=>any)|TokenType[]|TokenType;\ntype RRDataLayout = _RRDataLayout|{[key: string]: _RRDataLayout};\n\nconst rdata = new Map<RecordType, RRDataLayout>();\nrdata.set(RecordType.A, IP4ADDR);\nrdata.set(RecordType.NS, DOMAINNAME);\nrdata.set(RecordType.MD, DOMAINNAME);\nrdata.set(RecordType.MF, DOMAINNAME);\nrdata.set(RecordType.CNAME, DOMAINNAME);\nrdata.set(RecordType.SOA, {MNAME: DOMAINNAME, RNAME: DOMAINNAME, SERIAL: 'u32', REFRESH: 'u32', RETRY: 'u32', EXPIRE: 'u32', MINIMUM: 'u32'});\nrdata.set(RecordType.MB, DOMAINNAME);\nrdata.set(RecordType.MG, DOMAINNAME);\nrdata.set(RecordType.MR, DOMAINNAME);\nrdata.set(RecordType.NULL, 'string[*]');\nrdata.set(RecordType.WKS, {ADDRESS: IP4ADDR, PROTOCOL: 'u8', BITMAP: 'opaque'});\nrdata.set(RecordType.PTR, DOMAINNAME);\nrdata.set(RecordType.HINFO, {CPU: 'string', OS: 'string'});\nrdata.set(RecordType.MINFO, {RMAILBX: DOMAINNAME, EMAILBX: DOMAINNAME});\nrdata.set(RecordType.MX, {PREFERENCE: 's16', EXCHANGE: DOMAINNAME});\nrdata.set(RecordType.TXT, 'string[]');\nrdata.set(RecordType.RP, {mbox: DOMAINNAME, txt: DOMAINNAME});\nrdata.set(RecordType.AFSDB, {subtype: 's16', hostname: DOMAINNAME});\nrdata.set(RecordType.X25, 'string');\nrdata.set(RecordType.ISDN, (d: Tokenizer): {address: string, sa?: string}=>{const v: {address: string, sa?: string}={address: d.next('string').value as string, sa: undefined}; const n = d.next(); v.sa = n.done ? undefined : n.value as string; return v;});\nrdata.set(RecordType.RT, {preference: 's16', 'intermediate-host': DOMAINNAME});\nrdata.set(RecordType.NSAP, 'string');\nrdata.set(RecordType['NSAP-PTR'], 'string');\nrdata.set(RecordType.SIG, {type_covered: 'u16', algorithm: 'u8', labels: 'u8', original_ttl: 'u32', sig_expiration: 'u32', sig_inception: 'u32', key_tag: 'u16', signer: DOMAINNAME, signature: 'opaque'});\nrdata.set(RecordType.KEY, {flags: 'u16', protocol: 'u8', algorithm: 'u8', public_key: 'opaque'});\nrdata.set(RecordType.PX, {PREFERENCE: 's16', MAP822: DOMAINNAME, MAPX400: DOMAINNAME});\nrdata.set(RecordType.GPOS, {LONGITUDE: 'string', LATITUDE: 'string', ALTITUDE: 'string'});\nrdata.set(RecordType.AAAA, IP6ADDR);\nrdata.set(RecordType.LOC, (d: Tokenizer)=>{\n    const val = parseToken(d, {VERSION: 'u8', SIZE: EXP, HORIZ_PRE: EXP, VERT_PRE: EXP, LATITUDE: 'u32', LONGITUDE: 'u32', ALTITUDE: 'u32'});\n    const dms = (n: number)=>({d: Math.abs(Math.trunc(n / 3600000)), m: Math.abs(Math.trunc((n % 3600000) / 60000)), s: Math.abs(((n % 3600000) % 60000) / 1000)});\n    val.size = val.SIZE / 100;\n    val.horiz_pre = val.HORIZ_PRE / 100;\n    val.vert_pre = val.VERT_PRE / 100;\n    val.latitude = dms(val.LATITUDE - 2**31);\n    val.latitude.ns = val.LATITUDE <= 0 ? \"N\" : \"S\";\n    val.longitude = dms(val.LONGITUDE - 2**31);\n    val.longitude.ew = val.LONGITUDE <= 0 ? \"E\" : \"W\";\n    val.altitude = val.ALTITUDE / 100 - 100000;\n    return val;\n});\nrdata.set(RecordType.NXT, {next_domain_name: DOMAINNAME, type_bit_map: 'opaque'});\nrdata.set(RecordType.EID, 'opaque');\nrdata.set(RecordType.NIMLOC, 'opaque');\nrdata.set(RecordType.SRV, {priority: 'u16', weight: 'u16', port: 'u16', target: DOMAINNAME});\nrdata.set(RecordType.ATMA, 'opaque');\nrdata.set(RecordType.NAPTR, {ORDER: 'u16', PREFERENCE: 'u16', FLAGS: 'string', SERVICES: 'string', REGEXP: 'string', REPLACEMENT: DOMAINNAME});\nrdata.set(RecordType.KX, {PREFERENCE: 'u16', EXCHANGER: DOMAINNAME});\nrdata.set(RecordType.CERT, {type: 'u16', key_tag: 'u16', algorithm: 'u8', certificate: 'opaque'});\nrdata.set(RecordType.A6, 'opaque');\nrdata.set(RecordType.DNAME, DOMAINNAME);\nrdata.set(RecordType.SINK, {coding: 'u8', subcoding: 'u8', data: 'opaque'});\nrdata.set(RecordType.OPT, {code: 'u16', length: 'u16', data: 'opaque'});\nrdata.set(RecordType.APL, {ADDRESSFAMILY: 'u16', PREFIX: 'u8', N: 'bit', AFDLENGTH: (d: Tokenizer): number=>(new Array(7)).fill(undefined).map(x=>d.next('bit').value as number).reduce((acc: number, cur: number)=>((acc<<1)+cur), 0), AFDPART: 'opaque'});\nrdata.set(RecordType.DS, {key_tag: 'u16', algorithm: 'u8', digest_type: 'u8', digest: 'opaque'});\nrdata.set(RecordType.SSHFP, {algorithm: 'u8', fp_type: 'u8', fingerprint: 'opaque'});\nrdata.set(RecordType.IPSECKEY, (d: Tokenizer)=>{\n    const v={precedence: d.next('u8').value, gateway_type: d.next('u8').value, algorithm: d.next('u8').value} as {precedence: number, gateway_type: number, algorithm: number, gateway?: IP4ADDR|IP6ADDR|DOMAINNAME, public_key: OPAQUE};\n    switch (v.gateway_type) {\n        case 1:\n            v.gateway = IP4ADDR(d);\n            break;\n        case 2:\n            v.gateway = IP6ADDR(d);\n            break;\n        case 3:\n            v.gateway = d.next(DOMAINNAME).value as DOMAINNAME;\n            break;\n    }\n    v.public_key = d.next('opaque').value as OPAQUE;\n    return v;\n});\nrdata.set(RecordType.RRSIG, rdata.get(RecordType.SIG));\nrdata.set(RecordType.NSEC, rdata.get(RecordType.NXT));\nrdata.set(RecordType.DNSKEY, rdata.get(RecordType.KEY));\nrdata.set(RecordType.DHCID, 'opaque');\nrdata.set(RecordType.NSEC3, {hash_algorithm: 'u8', flags: 'u8', iterations: 'u16', salt: 'string', next_hashed_owner_name: 'string', type_bit_map: 'opaque'});\nrdata.set(RecordType.NSEC3PARAM, {hash_algorithm: 'u8', flags: 'u8', iterations: 'u16', salt: 'string'});\nrdata.set(RecordType.TLSA, {cert_usage: 'u8', selector: 'u8', matching_type: 'u8', cert_assoc_data: 'opaque'});\nrdata.set(RecordType.SMIMEA, rdata.get(RecordType.TLSA));\nrdata.set(RecordType.HIP, 'opaque');\nrdata.set(RecordType.NINFO, 'opaque');\nrdata.set(RecordType.RKEY, 'opaque');\nrdata.set(RecordType.TALINK, 'opaque');\nrdata.set(RecordType.CDS, rdata.get(RecordType.DS));\nrdata.set(RecordType.CDNSKEY, rdata.get(RecordType.DNSKEY));\nrdata.set(RecordType.OPENPGPKEY, 'opaque');\nrdata.set(RecordType.CSYNC, {SOA_serial: 'u32', flags: 'u16', type_bit_map: 'opaque'});\nrdata.set(RecordType.ZONEMD, 'opaque');\nrdata.set(RecordType.SVCB, {priority: 'u16', domainname: DOMAINNAME, values: (d: Tokenizer)=>{\n    const vals = {} as Record<string, string[]>;\n    for (let next = d.next('u16'); !next.done; next = d.next('u16')) {\n        const key = next.value as number;\n        let len = d.next('u16').value as number;\n        const val: string[] = [];\n        while (len > 0) {\n            const v = d.next('string').value as string;\n            len -= v.length + 1;\n            val.push(v);\n        }\n        // const val = d.next(`string[${len}]`).value as string;\n        switch (key) {\n            case 1:\n                vals.alpn = val;\n                break;\n            case 2:\n                vals.port = val;\n                break;\n            case 3:\n                vals.esnikeys = val;\n                break;\n            case 4:\n                vals.ipv4hint = val;\n                break;\n            case 6:\n                vals.ipv6hint = val;\n                break;\n            default:\n            case 0:\n            case 5:\n                vals[`key${key}`] = val;\n                break;\n        }\n    }\n    return vals;\n}});\nrdata.set(RecordType.HTTPSSVC, rdata.get(RecordType.SVCB));\nrdata.set(RecordType.SPF, 'string[]');\nrdata.set(RecordType.UINFO, 'opaque');\nrdata.set(RecordType.UID, 'opaque');\nrdata.set(RecordType.GID, 'opaque');\nrdata.set(RecordType.UNSPEC, 'opaque');\nrdata.set(RecordType.NID, 'opaque');\nrdata.set(RecordType.L32, 'opaque');\nrdata.set(RecordType.L64, 'opaque');\nrdata.set(RecordType.LP, 'opaque');\nrdata.set(RecordType.EUI48, (d: Tokenizer)=>(new Array(6)).fill(undefined).map(x=>d.next('u8').value as number));\nrdata.set(RecordType.EUI64, 'opaque');\nrdata.set(RecordType.TSIG, {algorithm_name: DOMAINNAME, time_signed_upper: 'u16', time_signed: 'u32', fudge: 'u16', MAC: (d: Tokenizer)=>(new Array(d.next('u16').value as number)).fill(undefined).map(x=>d.next('u8').value as number), original_id: 'u16', error: 'u16', other_len: 'u16', other_data: 'opaque'});\n// Not RR types\n// rdata.set(RecordType.IXFR, 'opaque');\n// rdata.set(RecordType.AXFR, 'opaque');\n// rdata.set(RecordType.MAILB, 'opaque');\n// rdata.set(RecordType.MAILA, 'opaque');\n// rdata.set(RecordType['*'], 'opaque');\nrdata.set(RecordType.URI, {priority: 'u16', weight: 'u16', target: 'string[*]'});\nrdata.set(RecordType.CAA, {flags: 'u8', tag: 'string', value: 'string[*]'});\nrdata.set(RecordType.AVC, 'opaque');\nrdata.set(RecordType.DOA, 'opaque');\nrdata.set(RecordType.AMTRELAY, 'opaque');\nrdata.set(RecordType.TA, 'opaque');\nrdata.set(RecordType.DLV, 'opaque');\n\nfunction parseToken(d: Tokenizer, layout: RRDataLayout): any {\n    switch (typeof layout) {\n        case \"function\":\n            return layout(d);\n        case \"object\":\n            return Object.entries(layout).reduce((acc, [k, v])=>{acc[k] = parseToken(d, v); return acc;}, {} as {[key: string]: any});\n        case \"string\":\n            return d.next(layout).value;\n    }\n}\n\nexport default function parse(d: Tokenizer, type: RecordType.A): IP4ADDR;\nexport default function parse(d: Tokenizer, type: RecordType.AAAA): IP6ADDR;\nexport default function parse(d: Tokenizer, type: RecordType.SOA): {MNAME: string[], RNAME: string[], SERIAL: number, REFRESH: number, RETRY: number, EXPIRE: number, MINIMUM: number};\nexport default function parse(d: Tokenizer, type: RecordType.NS|RecordType.MD|RecordType.MF|RecordType.CNAME|RecordType.SOA|RecordType.MB|RecordType.MG|RecordType.MR|RecordType.PTR|RecordType.TXT|RecordType.DNAME|RecordType.SPF): string[];\nexport default function parse(d: Tokenizer, type: RecordType.NULL|RecordType.X25|RecordType.NSAP): string;\nexport default function parse(d: Tokenizer, type: RecordType.WKS): {ADDRESS: IP4ADDR, PROTOCOL: number, BITMAP: OPAQUE};\nexport default function parse(d: Tokenizer, type: RecordType.HINFO): {CPU: string, OS: string};\nexport default function parse(d: Tokenizer, type: RecordType.MINFO): {RMAILBX: DOMAINNAME, EMAILBX: DOMAINNAME};\nexport default function parse(d: Tokenizer, type: RecordType.MX): {PREFERENCE: string, EXCHANGE: DOMAINNAME};\nexport default function parse(d: Tokenizer, type: RecordType.RP): {mbox: DOMAINNAME, txt: DOMAINNAME};\nexport default function parse(d: Tokenizer, type: RecordType.AFSDB): {subtype: string, hostname: DOMAINNAME};\nexport default function parse(d: Tokenizer, type: RecordType.ISDN): {address: string, sa?: string};\nexport default function parse(d: Tokenizer, type: RecordType.RT): {preference: string, 'intermediate-host': DOMAINNAME};\nexport default function parse(d: Tokenizer, type: RecordType.SIG|RecordType.RRSIG): {type_covered: number, algorithm: number, labels: number, original_ttl: number, sig_expiration: number, sig_inception: number, key_tag: number, signer: DOMAINNAME, signature: OPAQUE};\nexport default function parse(d: Tokenizer, type: RecordType.KEY|RecordType.DNSKEY|RecordType.CDNSKEY): {flags: number, protocol: number, algorithm: number, public_key: OPAQUE};\nexport default function parse(d: Tokenizer, type: RecordType.PX): {PREFERENCE: number, MAP822: DOMAINNAME, MAPX400: DOMAINNAME};\nexport default function parse(d: Tokenizer, type: RecordType.GPOS): {LONGITUDE: string, LATITUDE: string, ALTITUDE: string};\nexport default function parse(d: Tokenizer, type: RecordType.LOC): {VERSION: number, SIZE: number, HORIZ_PRE: number, VERT_PRE: number, LATITUDE: number, LONGITUDE: number, ALTITUDE: number, size: number, horiz_pre: number, vert_pre: number, latitude: {d: number, m: number, s: number, ns: string}, longitude: {d: number, m: number, s: number, ew: string}, altitude: number};\nexport default function parse(d: Tokenizer, type: RecordType.NXT|RecordType.NSEC): {next_domain_name: DOMAINNAME, type_bit_map: OPAQUE};\nexport default function parse(d: Tokenizer, type: RecordType.EID|RecordType.NIMLOC|RecordType.ATMA|RecordType.A6|RecordType.DHCID|RecordType.HIP|RecordType.NINFO|RecordType.RKEY|RecordType.TALINK|RecordType.OPENPGPKEY|RecordType.ZONEMD|RecordType.UINFO|RecordType.UID|RecordType.GID|RecordType.UNSPEC|RecordType.NID|RecordType.L32|RecordType.L64|RecordType.LP|RecordType.EUI64|RecordType.AVC|RecordType.DOA|RecordType.AMTRELAY|RecordType.TA|RecordType.DLV): OPAQUE;\nexport default function parse(d: Tokenizer, type: RecordType.SRV): {priority: number, weight: number, port: number, target: DOMAINNAME};\nexport default function parse(d: Tokenizer, type: RecordType.NAPTR): {ORDER: number, PREFERENCE: number, FLAGS: string, SERVICES: string, REGEXP: string, REPLACEMENT: DOMAINNAME};\nexport default function parse(d: Tokenizer, type: RecordType.KX): {PREFERENCE: number, EXCHANGER: DOMAINNAME};\nexport default function parse(d: Tokenizer, type: RecordType.CERT): {type: number, key_tag: number, algorithm: number, certificate: OPAQUE};\nexport default function parse(d: Tokenizer, type: RecordType.SINK): {coding: number, subcoding: number, data: OPAQUE};\nexport default function parse(d: Tokenizer, type: RecordType.OPT): {code: number, length: number, data: OPAQUE};\nexport default function parse(d: Tokenizer, type: RecordType.APL): {ADDRESSFAMILY: number, PREFIX: number, N: number, AFDLENGTH: number, AFDPART: OPAQUE};\nexport default function parse(d: Tokenizer, type: RecordType.DS|RecordType.CDS): {key_tag: number, algorithm: number, digest_type: number, digest: OPAQUE};\nexport default function parse(d: Tokenizer, type: RecordType.SSHFP): {algorithm: number, fp_type: number, fingerprint: OPAQUE};\nexport default function parse(d: Tokenizer, type: RecordType.IPSECKEY): {precedence: number, gateway_type: number, algorithm: number, gateway?: IP4ADDR|IP6ADDR|DOMAINNAME, public_key: OPAQUE};\nexport default function parse(d: Tokenizer, type: RecordType.NSEC3): {hash_algorithm: number, flags: number, iterations: number, salt: string, next_hashed_owner_name: string, type_bit_map: OPAQUE};\nexport default function parse(d: Tokenizer, type: RecordType.NSEC3PARAM): {hash_algorithm: number, flags: number, iterations: number, salt: string};\nexport default function parse(d: Tokenizer, type: RecordType.TLSA|RecordType.SMIMEA): {cert_usage: number, selector: number, matching_type: number, cert_assoc_data: OPAQUE};\nexport default function parse(d: Tokenizer, type: RecordType.CSYNC): {SOA_serial: number, flags: number, type_bit_map: OPAQUE};\nexport default function parse(d: Tokenizer, type: RecordType.SVCB|RecordType.HTTPSSVC): {priority: number, domainname: DOMAINNAME, values: Record<'alpn'|'port'|'esnikeys'|'ipv4hint'|'ipv6hint'|string, string[]>};\nexport default function parse(d: Tokenizer, type: RecordType.EUI48): [number, number, number, number, number, number];\nexport default function parse(d: Tokenizer, type: RecordType.TSIG): {algorithm_name: DOMAINNAME, time_signed_upper: number, time_signed: number, fudge: number, MAC: number[], original_id: number, error: number, other_len: number, other_data: OPAQUE};\nexport default function parse(d: Tokenizer, type: RecordType.URI): {priority: number, weight: number, target: string};\nexport default function parse(d: Tokenizer, type: RecordType.CAA): {flags: number, tag: string, value: string};\nexport default function parse(d: Tokenizer, type: RecordType): any;\nexport default function parse(d: Tokenizer, type: RecordType): any {\n    return parseToken(d, rdata.get(type) || 'opaque');\n}\n","import {RecordType} from \"./constants.js\";\nimport RDATA from \"./rfc_rdata.js\"\n\nexport interface Header {\n    ID: number,\n    QR: 0|1,\n    Opcode: 0|1|2,\n    AA: 0|1,\n    TC: 0|1,\n    RD: 0|1,\n    RA: 0|1,\n    Z?: undefined,\n    AD: 0|1,\n    CD: 0|1,\n    RCODE?: 0|1|2|3|4|5, // TODO create enum\n    QDCOUNT: number,\n    ANCOUNT?: number,\n    NSCOUNT?: number,\n    ARCOUNT?: number,\n}\n\nconst header = {\n    ID: 'u16',  // A 16 bit identifier assigned by the program that\n                // generates any kind of query.  This identifier is copied\n                // the corresponding reply and can be used by the requester\n                // to match up replies to outstanding queries.\n\n    QR: 'bit',  // A one bit field that specifies whether this message is a\n                // query (0), or a response (1).\n\n    Opcode: 'u4',   // A four bit field that specifies kind of query in this\n                    // message.  This value is set by the originator of a query\n                    // and copied into the response.  The values are:\n                    // 0               a standard query (QUERY)\n                    // 1               an inverse query (IQUERY)\n                    // 2               a server status request (STATUS)\n                    // 3-15            reserved for future use\n\n    AA: 'bit',  // Authoritative Answer - this bit is valid in responses,\n                // and specifies that the responding name server is an\n                // authority for the domain name in question section.\n                //\n                // Note that the contents of the answer section may have\n                // multiple owner names because of aliases.  The AA bit\n                // corresponds to the name which matches the query name, or\n                // the first owner name in the answer section.\n\n    TC: 'bit',  // TrunCation - specifies that this message was truncated\n                // due to length greater than that permitted on the\n                // transmission channel.\n\n    RD: 'bit',  // Recursion Desired - this bit may be set in a query and\n                // is copied into the response.  If RD is set, it directs\n                // the name server to pursue the query recursively.\n                //     Recursive query support is optional.\n\n    RA: 'bit',  // Recursion Available - this be is set or cleared in a\n                // response, and denotes whether recursive query support is\n                // available in the name server.\n\n    Z: 'u3',   // Reserved for future use.  Must be zero in all queries\n                // and responses.\n\n    AD: 'bit',  // Authenticated data, used by DNSSEC\n    CD: 'bit',  // Checking Disabled, used by DNSSEC\n\n    RCODE: 'u4',// Response code - this 4 bit field is set as part of\n                // responses.  The values have the following\n                // interpretation:\n                //\n                // 0               No error condition\n                //\n                // 1               Format error - The name server was\n                //                 unable to interpret the query.\n                //\n                // 2               Server failure - The name server was\n                //                 unable to process this query due to a\n                //                 problem with the name server.\n                //\n                // 3               Name Error - Meaningful only for\n                //                 responses from an authoritative name\n                //                 server, this code signifies that the\n                //                 domain name referenced in the query does\n                //                 not exist.\n                //\n                // 4               Not Implemented - The name server does\n                //                 not support the requested kind of query.\n                //\n                // 5               Refused - The name server refuses to\n                //                 perform the specified operation for\n                //                 policy reasons.  For example, a name\n                //                 server may not wish to provide the\n                //                 information to the particular requester,\n                //                 or a name server may not wish to perform\n                //                 a particular operation (e.g., zone\n                // transfer) for particular data.\n                //\n                // 6-15            Reserved for future use.\n\n    QDCOUNT: 'u16',// an unsigned 16 bit integer specifying the number of\n                   // entries in the question section.\n\n    ANCOUNT: 'u16',// an unsigned 16 bit integer specifying the number of\n                   // resource records in the answer section.\n\n    NSCOUNT: 'u16',// an unsigned 16 bit integer specifying the number of name\n                   // server resource records in the authority records\n                   // section.\n\n    ARCOUNT: 'u16',// an unsigned 16 bit integer specifying the number of\n                   // resource records in the additional records section.\n} as Record<keyof Header, TokenType>;\n\nconst HeaderLen = 12; // bytes\n\nexport enum CLASS {\n    IN = 1,\n    CS = 2,\n    CH = 3,\n    HS = 4,\n}\n\nexport class Question {\n    QNAME: string[];\n    QTYPE: RecordType;\n    QCLASS: CLASS | 255; // TODO create enum\n    constructor(QNAME: string[], QTYPE: RecordType, QCLASS: CLASS|255 = CLASS.IN) {\n        this.QNAME = QNAME;\n        this.QTYPE = QTYPE;\n        this.QCLASS = QCLASS;\n    }\n}\n\nconst question = {\n    QNAME: 'string[]',  // a domain name represented as a sequence of labels, where\n                        // each label consists of a length octet followed by that\n                        // number of octets.  The domain name terminates with the\n                        // zero length octet for the null label of the root.  Note\n                        // that this field may be an odd number of octets; no\n                        // padding is used.\n\n    QTYPE: 'u16',   // a two octet code which specifies the type of the query.\n                    // The values for this field include all codes valid for a\n                    // TYPE field, together with some more general codes which\n                    // can match more than one type of RR.\n\n    QCLASS: 'u16',  // a two octet code that specifies the class of the query.\n                    // For example, the QCLASS field is IN for the Internet.\n} as Record<keyof Question, TokenType>;\n\nexport interface ResponseRecord {\n    NAME: string,\n    TYPE: RecordType,\n    CLASS: CLASS,\n    TTL: number,\n    RDLENGTH: number,\n    RDATA: any,\n}\n\nconst record = {\n    NAME: 'string[]', // a domain name to which this resource record pertains.\n\n    TYPE: 'u16',    // two octets containing one of the RR type codes.  This\n                    // field specifies the meaning of the data in the RDATA\n                    // field.\n\n    CLASS: 'u16',   // two octets which specify the class of the data in the\n                    // RDATA field.\n\n    TTL: 'u32',     // a 32 bit unsigned integer that specifies the time\n                    // interval (in seconds) that the resource record may be\n                    // cached before it should be discarded.  Zero values are\n                    // interpreted to mean that the RR can only be used for the\n                    // transaction in progress, and should not be cached.\n    RDLENGTH: 'u16',// an unsigned 16 bit integer that specifies the length in\n                    // octets of the RDATA field.\n\n//  RDATA              a variable length string of octets that describes the\n//                     resource.  The format of this information varies\n//                     according to the TYPE and CLASS of the resource record.\n//                     For example, the if the TYPE is A and the CLASS is IN,\n//                     the RDATA field is a 4 octet ARPA Internet address.\n} as Record<keyof ResponseRecord, TokenType>;\n\nexport type TokenType = 's16'|'u8'|'u16'|'string'|'u32'|'string[]'|'string[*]'|string|'u3'|'u4'|'bit'|'opaque'|number;\nexport type TokenVal = number|string|string[]|ArrayBuffer|undefined;\nexport type Tokenizer = Generator<TokenVal, undefined, TokenType>;\n\n/**\n * Deserialize binary RFC1035 wire format\n * Returns a Generator that accepts 's16'|'u8'|'u16'|'string'|'u32'|'string[]'|'string[*]'|'u3'|'u4'|'bit'|'opaque'|number as a parameter\n * The generator will consume bytes and yield the related native type.\n * Pass undefined to yield the current byte offset, or a number to advance the byte offset by the value number of bytes.\n * @param data buffer populated with data to deserialize\n * @param start buffer start offset\n * @param end buffer end offset\n */\nexport function* deserialize(data: ArrayBuffer, start: number = 0, end?: number): Tokenizer {\n    const view = new DataView(data, start, end && end - start);\n    let ptrView;\n    let len = 0;\n    let val;\n    let strlen;\n    for (let bitOffset = 0; bitOffset < view.byteLength * 8; bitOffset += len) {\n        len = 0;\n        const byteOffset = Math.trunc(bitOffset / 8);\n        const type = yield val;\n        switch (type) {\n            case 's16':\n                val = view.getInt16(byteOffset);\n                // Currently all s16 values are byte aligned, no shifting required\n                len = 16;\n                break;\n            case 'u8':\n                val = view.getUint8(byteOffset);\n                // Currently all u8 values are byte aligned, no shifting required\n                len = 8;\n                break;\n            case 'u16':\n                val = view.getUint16(byteOffset);\n                // Currently all u16 values are byte aligned, no shifting required\n                len = 16;\n                break;\n            case 'u32':\n                val = view.getUint32(byteOffset);\n                // Currently all u32 values are byte aligned, no shifting required\n                len = 32;\n                break;\n            case 'u3':\n                // Only used by header Z field\n                val = undefined;\n                len = 3;\n                break;\n            case 'u4':\n                val = view.getUint16(byteOffset);\n                val = 0b1111 & (val >> (11 - (bitOffset % 8)));\n                len = 4;\n                break;\n            case 'bit':\n                val = view.getUint8(byteOffset);\n                val = 0b1 & (val >> (7 - (bitOffset % 8)));\n                len = 1;\n                break;\n            case 'opaque': // Consume remainder of data\n                yield data.slice(byteOffset + start, end);\n                return;\n            case 'string[*]': // Consume remainder of data as string\n                yield String.fromCodePoint(...new Uint8Array(data.slice(byteOffset + start, end)));\n                return;\n            case 'string': // Length prefixed string\n                strlen = view.getUint8(byteOffset);\n                val = String.fromCodePoint(...new Uint8Array(data.slice(byteOffset + start + 1, byteOffset + start + strlen + 1)));\n                len += (strlen + 1) * 8;\n                break;\n            case 'string[]': // Array of length prefixed strings, zero terminated or until end of data\n                val = [];\n                let ptr;\n                while (ptr === undefined && byteOffset + len < view.byteLength) {\n                    strlen = view.getUint8(byteOffset + len);\n                    if (strlen > 63) {\n                        strlen = view.getUint16(byteOffset + len);\n                        ptr = strlen & 0b0011111111111111;\n                        len += 2;\n                        break;\n                    } else len += 1;\n                    if (strlen === 0) {\n                        val.push(\"\");\n                        break;\n                    } else {\n                        val.push(String.fromCodePoint(...new Uint8Array(data.slice(byteOffset + start + len, byteOffset + start + len + strlen))));\n                        len += strlen;\n                    }\n                }\n                if (ptr !== undefined) {\n                    if (!ptrView) ptrView = new DataView(data);\n                    // https://tools.ietf.org/html/rfc1035#section-4.1.4\n                    while (true) {\n                        strlen = ptrView.getUint8(ptr);\n                        ++ptr;\n                        if (strlen === 0) {\n                            val.push(\"\");\n                            break;\n                        } else if (strlen > 63) {\n                            strlen = view.getUint16(ptr);\n                            ptr = strlen & 0b0011111111111111;\n                        } else {\n                            val.push(String.fromCodePoint(...new Uint8Array(data.slice(ptr, ptr + strlen))));\n                            ptr += strlen;\n                        }\n                    }\n                }\n                len *= 8;\n                break;\n            case undefined:  // Return current byteOffset if no type provided\n                val = byteOffset;\n                break;\n            default:\n                if (typeof type === 'number') {\n                    len = type * 8;\n                } else if (typeof type === 'string' && (type as string).startsWith('string[')) {\n                    len = parseInt((type as string).substring(7, (type as string).length-1), 10);\n                    val = String.fromCodePoint(...new Uint8Array(data.slice(byteOffset + start, byteOffset + start + len)));\n                    len *= 8;\n                } else throw Error('Unknown token type');\n\n        }\n    }\n    yield val;\n    return;\n}\n// TODO implement https://tools.ietf.org/html/rfc1035#section-2.3.4\n// TODO support truncated responses\n\nfunction setString(view: DataView, val: string) {\n    let len = 0;\n    view.setUint8(0, val.length);\n    for (; len < val.length; ++len) {\n        view.setUint8(1 + len, val.charCodeAt(len));\n    }\n}\n\n/**\n * Serialize binary RFC1035 wire format\n * Returns a Generator that accepts tuples of ('s16'|'u8'|'u16'|'string'|'u32'|'string[]'|'string[*]'|'u3'|'u4'|'bit'|'opaque', number|string|string[]|ArrayBuffer) as a parameter\n * The generator will convert the second tuple value to the binary representation specified in the first tuple value\n * @param data buffer to populate\n */\nexport function* serialize(data: ArrayBuffer): Generator<number, undefined, [TokenType, TokenVal]> {\n    const view = new DataView(data);\n    let len = 0;\n    for (let bitOffset = 0; bitOffset < view.byteLength * 8; bitOffset += len) {\n        len = 0;\n        let byteOffset = Math.trunc(bitOffset / 8);\n        const [type, val] = yield byteOffset;\n        switch (type) {\n            case 's16':\n                if (typeof val !== 'number') throw Error(`Token value mismatch ${type} vs ${typeof val}`);\n                view.setInt16(byteOffset, val);\n                // Currently all s16 values are byte aligned, no shifting required\n                len = 16;\n                break;\n            case 'u8':\n                if (typeof val !== 'number') throw Error(`Token value mismatch ${type} vs ${typeof val}`);\n                view.setUint8(byteOffset, val);\n                // Currently all u8 values are byte aligned, no shifting required\n                len = 8;\n                break;\n            case 'u16':\n                if (typeof val !== 'number') throw Error(`Token value mismatch ${type} vs ${typeof val}`);\n                view.setUint16(byteOffset, val);\n                // Currently all u16 values are byte aligned, no shifting required\n                len = 16;\n                break;\n            case 'u32':\n                if (typeof val !== 'number') throw Error(`Token value mismatch ${type} vs ${typeof val}`);\n                view.setUint32(byteOffset, val);\n                // Currently all u32 values are byte aligned, no shifting required\n                len = 32;\n                break;\n            case 'u3':\n                // Only used by header Z field, no-op\n                len = 3;\n                break;\n            case 'u4':\n                if (typeof val !== 'number') throw Error(`Token value mismatch ${type} vs ${typeof val}`);\n                let bigval = view.getUint16(byteOffset);\n                bigval |= val << (11 - (bitOffset % 8));\n                view.setUint16(byteOffset, bigval);\n                len = 4;\n                break;\n            case 'bit':\n                if (typeof val !== 'number') throw Error(`Token value mismatch ${type} vs ${typeof val}`);\n                let byte = view.getUint8(byteOffset);\n                byte |= val << (7 - (bitOffset % 8));\n                view.setUint8(byteOffset, byte);\n                len = 1;\n                break;\n            case 'string[*]': // Write remainder of data as string\n                if (typeof val !== 'string') throw Error(`Token value mismatch ${type} vs ${typeof val}`);\n                if (val.length < view.byteLength - byteOffset) {\n                    for (; len < val.length; ++len) {\n                        view.setUint8(byteOffset + len, val.charCodeAt(len));\n                    }\n                }\n                return;\n            case 'string': // Length prefixed string\n                if (typeof val !== 'string') throw Error(`Token value mismatch ${type} vs ${typeof val}`);\n                setString(new DataView(data, byteOffset, val.length+1), val);\n                len = (val.length + 1) * 8;\n                break;\n            case 'string[]': // Array of length prefixed strings, zero terminated or until end of data\n                if (!Array.isArray(val)) throw Error(`Token value mismatch ${type} vs ${typeof val}`);\n                for (const str of val) {\n                    if (typeof str !== 'string') throw Error(`Token value mismatch 'string' vs ${typeof str}`);\n                    setString(new DataView(data, byteOffset, str.length+1), str);\n                    byteOffset += str.length + 1;\n                    len += (str.length + 1) * 8;\n                }\n                if (val[val.length-1].length !== 0) { // Zero terminate if last element of val not empty\n                    view.setUint8(byteOffset, 0);\n                    len += 8;\n                }\n                break;\n            case 'opaque':\n                if (val instanceof Uint8Array) {\n                    val.forEach((v, i)=>view.setUint8(byteOffset + i, v));\n                    len += val.length * 8;\n                }\n                break;\n            default:\n                throw Error(`Unknown token type: ${type}`);\n        }\n    }\n    return;\n}\n\nexport function buildRequest(questions: Question[], recursive: boolean = true): ArrayBuffer {\n    const totalLen = HeaderLen\n        + (questions.length * 4) // Bytes for QTYPE+QCLASS\n        + questions.reduce((acc, q)=>acc + q.QNAME.length + q.QNAME.reduce((a,c)=>a+c.length, 0) + ( q.QNAME[q.QNAME.length-1].length === 0 ? 0 : 1 ), 0); // Bytes required for QNAMEs\n    const buf = new ArrayBuffer(totalLen);\n    const encoder = serialize(buf);\n    encoder.next();\n    const head = {ID: 0, QR: 0, Opcode: 0, AA: 0, TC: 0, RD: recursive ? 1 : 0, QDCOUNT: questions.length} as Header;\n    for (const [token, type] of Object.entries(header) as [keyof Header, TokenType][]) encoder.next([type, head[token] || 0]);\n    for (const q of questions) {\n        for (const [token, type] of Object.entries(question) as [keyof Question, TokenType][]) encoder.next([type, q[token]]);\n    }\n    return buf;\n}\n\nexport interface Response {\n    header: Header,\n    question: Question[],\n    answer: ResponseRecord[],\n    authority: ResponseRecord[],\n    additional: ResponseRecord[],\n}\n\nexport function parseResponse(data: ArrayBuffer): Response {\n    const decoder = deserialize(data);\n    decoder.next();\n    const response: Response = {header: {} as Header, question: [], answer: [], authority: [], additional: []};\n    // Header\n    for (const [token, type] of Object.entries(header) as [keyof Header, TokenType][]) (response.header[token] as TokenVal) = decoder.next(type).value;\n\n    // Question[]\n    for (let i = 0; i < response.header.QDCOUNT; ++i) {\n        const q: Question = {} as Question;\n        for (const [token, type] of Object.entries(question) as [keyof Question, TokenType][]) (q[token] as TokenVal) = decoder.next(type).value;\n        response.question.push(q);\n    }\n\n    // answer, authority, additional\n    for (const [count, category] of [[response.header.ANCOUNT, response.answer], [response.header.NSCOUNT, response.authority], [response.header.ARCOUNT, response.additional]]) {\n        for (let i = 0; i < count; ++i) {\n            const r: ResponseRecord = {} as ResponseRecord;\n            for (const [token, type] of Object.entries(record) as [keyof ResponseRecord, TokenType][]) (r[token] as TokenVal) = decoder.next(type).value;\n            const byteOffset = decoder.next().value as number;\n            const end = byteOffset + r.RDLENGTH;\n            if (end > data.byteLength) throw Error(`RDLENGTH extends past end of received data`);\n            decoder.next(r.RDLENGTH); // Advance by RDLENGTH\n            const rdataDecoder = deserialize(data, byteOffset, end);\n            rdataDecoder.next();\n            r.RDATA = RDATA(rdataDecoder, r.TYPE);\n            (category as ResponseRecord[]).push(r);\n        }\n    }\n    return response;\n}\n","/**\n * RFS8484 DoH Resolver\n * https://tools.ietf.org/html/rfc8484\n */\n\nimport {BaseResolver} from './base_resolver.js'\nimport {\n    AnyAAAARecord,\n    AnyARecord,\n    AnyCAARecord,\n    AnyCNAMERecord,\n    AnyMXRecord,\n    AnyNAPTRRecord,\n    AnyNSRecord,\n    AnyPTRRecord,\n    AnySOARecord,\n    AnySRVRecord,\n    AnyTXTRecord,\n    CAARecord,\n    DNSError,\n    MXRecord,\n    NAPTRRecord,\n    ResolveOptions,\n    SRVRecord,\n} from './dns.js'\nimport {RecordType} from \"./constants.js\";\nimport {buildRequest, parseResponse, Question} from \"./rfc1035.js\";\n\nexport function base64url_encode(buffer: ArrayBuffer): string {\n    return btoa(Array.from(new Uint8Array(buffer), b => String.fromCharCode(b)).join(''))\n        .replace(/\\+/g, '-')\n        .replace(/\\//g, '_')\n        .replace(/=+$/, '');\n}\n\nexport function base64url_decode(value: string): ArrayBuffer {\n    const m = value.length % 4;\n    return Uint8Array.from(atob(\n        value.replace(/-/g, '+')\n            .replace(/_/g, '/')\n            .padEnd(value.length + (m === 0 ? 0 : 4 - m), '=')\n    ), c => c.charCodeAt(0)).buffer\n}\n\nfunction ipString(type: RecordType, ip: number[]): string {\n    if (type === RecordType.A) return ip.map(n => n.toString(10)).join('.');\n    else if (type === RecordType.AAAA) {\n        // IP6 shortening\n        let start = 0;\n        let len = 0;\n        let longestLen = 0;\n        let longestStart = 0;\n        for (let i = 0; i < ip.length; ++i) {\n            if (ip[i] === 0 && len === 0) {\n                start = i;\n                ++len;\n            } else if (ip[i] !== 0 && len !== 0) {\n                if (len > longestLen) {\n                    longestLen = len;\n                    longestStart = start;\n                }\n                len = 0;\n            } else if (len !== 0) ++len;\n        }\n        if (longestLen === ip.length || len === ip.length) return '::';\n        if (longestLen !== 0 || len !== 0) {\n            const ipStr = ip.map(n => n.toString(16));\n            return [...ipStr.slice(0, longestStart), '', ...ipStr.slice(longestStart + (longestLen || len))].join(':');\n        }\n        return ip.map(n => n.toString(16)).join(':');\n    }\n}\n\nexport default class Resolver extends BaseResolver {\n    protected servers: string[] = ['cloudflare-dns.com'];\n\n    resolve(hostname: string, rrtype?: (keyof typeof RecordType) | \"ANY\", options?: ResolveOptions): Promise<any> {\n        if (rrtype === \"ANY\") rrtype = \"*\";\n        else if (rrtype === undefined) rrtype = 'A';\n        const payload = base64url_encode(buildRequest([new Question(hostname.split('.'), RecordType[rrtype as keyof typeof RecordType])]));\n        return this._fetch(`https://${this.getServers()[0]}/dns-query?dns=${payload}`, {headers: new Headers({'accept': 'application/dns-message'})})\n            .then(response => response.arrayBuffer())\n            .then(parseResponse)\n            .then(response => {\n                if (!response.answer) throw DNSError.NODATA;\n                if (options && options.raw) return response;\n                switch (rrtype) {\n                    case 'A':\n                    case 'AAAA':\n                        if (options && options.ttl) return response.answer.map(item => ({\n                            type: rrtype,\n                            address: ipString(item.TYPE, item.RDATA),\n                            ttl: item.TTL\n                        }));\n                        return response.answer.map(item => ipString(item.TYPE, item.RDATA));\n                    default:\n                    case 'CNAME':\n                    case 'NS':\n                    case 'PTR':\n                        return response.answer.map(item => item.RDATA.join ? item.RDATA.filter((i: any) => !!i).join('.') : item.RDATA);\n                    case 'ANY':\n                        return response.answer.map(item => {\n                            switch (item.TYPE) {\n                                case RecordType.A:\n                                    return {\n                                        type: 'A',\n                                        address: ipString(item.TYPE, item.RDATA),\n                                        ttl: item.TTL\n                                    } as AnyARecord;\n                                case RecordType.AAAA:\n                                    return {\n                                        type: 'AAAA',\n                                        address: ipString(item.TYPE, item.RDATA),\n                                        ttl: item.TTL\n                                    } as AnyAAAARecord;\n                                case RecordType.CNAME:\n                                    return {type: 'CNAME', value: item.RDATA} as AnyCNAMERecord;\n                                case RecordType.NS:\n                                    return {type: 'NS', value: item.RDATA} as AnyNSRecord;\n                                case RecordType.PTR:\n                                    return {type: 'PTR', value: item.RDATA} as AnyPTRRecord;\n                                case RecordType.NAPTR:\n                                    return {\n                                        type: 'NAPTR',\n                                        flags: item.RDATA.FLAGS,\n                                        order: item.RDATA.ORDER,\n                                        preference: item.RDATA.PREFERENCE,\n                                        regexp: item.RDATA.REGEXP,\n                                        replacement: item.RDATA.REPLACEMENT.filter((x: string) => !!x).join('.'),\n                                        service: item.RDATA.SERVICES\n                                    } as AnyNAPTRRecord;\n                                case RecordType.SOA:\n                                    return {\n                                        type: 'SOA',\n                                        minttl: item.RDATA.MINIMUM,\n                                        expire: item.RDATA.EXPIRE,\n                                        retry: item.RDATA.RETRY,\n                                        refresh: item.RDATA.REFRESH,\n                                        serial: item.RDATA.SERIAL,\n                                        hostmaster: item.RDATA.RNAME.filter((x: string) => !!x).join('.'),\n                                        nsname: item.RDATA.MNAME.filter((x: string) => !!x).join('.')\n                                    } as AnySOARecord;\n                                case RecordType.MX:\n                                    return {\n                                        type: 'MX',\n                                        exchange: item.RDATA.EXCHANGE.filter((x: string) => !!x).join('.'),\n                                        priority: item.RDATA.PREFERENCE\n                                    } as AnyMXRecord;\n                                case RecordType.TXT:\n                                    return {type: 'TXT', entries: item.RDATA} as AnyTXTRecord;\n                                case RecordType.CAA:\n                                    return {\n                                        type: 'CAA',\n                                        critical: item.RDATA.flags,\n                                        [item.RDATA.tag]: item.RDATA.value\n                                    } as AnyCAARecord;\n                                case RecordType.SRV:\n                                    return {\n                                        type: \"SRV\",\n                                        weight: item.RDATA.weight,\n                                        priority: item.RDATA.priority,\n                                        name: item.RDATA.target.filter((x: string) => !!x).join('.'),\n                                        port: item.RDATA.port\n                                    } as AnySRVRecord;\n                            }\n                        });\n                    case 'MX':\n                        return response.answer.map(item => ({\n                            exchange: item.RDATA.EXCHANGE.filter((x: string) => !!x).join('.'),\n                            priority: item.RDATA.PREFERENCE\n                        } as MXRecord));\n                    case 'NAPTR':\n                        return response.answer.map(item => ({\n                            flags: item.RDATA.FLAGS,\n                            order: item.RDATA.ORDER,\n                            preference: item.RDATA.PREFERENCE,\n                            regexp: item.RDATA.REGEXP,\n                            replacement: item.RDATA.REPLACEMENT.filter((x: string) => !!x).join('.'),\n                            service: item.RDATA.SERVICES\n                        } as NAPTRRecord));\n                    case 'SOA':\n                        return response.answer.map(item => ({\n                            minttl: item.RDATA.MINIMUM,\n                            expire: item.RDATA.EXPIRE,\n                            retry: item.RDATA.RETRY,\n                            refresh: item.RDATA.REFRESH,\n                            serial: item.RDATA.SERIAL,\n                            hostmaster: item.RDATA.RNAME.filter((x: string) => !!x).join('.'),\n                            nsname: item.RDATA.MNAME.filter((x: string) => !!x).join('.')\n                        } as AnySOARecord))[0];\n                    case 'SRV':\n                        return response.answer.map(item => ({\n                            weight: item.RDATA.weight,\n                            priority: item.RDATA.priority,\n                            name: item.RDATA.target.filter((x: string) => !!x).join('.'),\n                            port: item.RDATA.port\n                        } as SRVRecord));\n                    case 'TXT':\n                        return response.answer.map(item => item.RDATA);\n                    case 'CAA':\n                        return response.answer.filter(item => item.TYPE === RecordType.CAA).map(item => ({\n                            critical: item.RDATA.flags,\n                            [item.RDATA.tag]: item.RDATA.value\n                        } as CAARecord));\n                }\n            });\n    }\n}\n","import {\n    Resolver,\n    PromiseResolver,\n    DNSRecord,\n    NAPTRRecord,\n    SOARecord,\n    SRVRecord,\n    ARecord,\n    AAAARecord,\n    DNSError, LookupCallback, LookupCallbackAll, AnyDNSRecord\n} from './dns.js'\nimport RFCResolver from './rfc8484.js'\nimport * as constants from './constants.js'\n\n/**\n * Wrapper around Promise based Resolver implementations to support callback interface.\n * Pass an instantiated PromiseResolver to constructor to wrap the resolver.\n * Defaults to CloudFlare resolver.\n */\nclass CallbackResolver implements Resolver {\n    _resolver: PromiseResolver;\n\n    constructor(options?: { timeout: number; } | PromiseResolver) {\n        if (options === undefined) {\n            this._resolver = new RFCResolver();\n        } else if ('timeout' in options) {\n            this._resolver = new RFCResolver(options);\n        } else {\n            this._resolver = options;\n        }\n    }\n\n    cancel(): void {\n        this._resolver.cancel();\n    }\n\n    getServers(): string[] {\n        return this._resolver.getServers();\n    }\n\n    resolve(hostname: string, ...args: any[]): void {\n        const callback = args.pop();\n        this._resolver.resolve(hostname, args[0]).then(v=>callback(undefined, v)).catch(e=>callback(e, undefined));\n    }\n\n    resolve4(hostname: string, callback: (err?: DNSError, address?: string[]) => void): void;\n    resolve4(hostname: string, options: { ttl: true }, callback: (err?: DNSError, address?: ARecord[]) => void): void;\n    resolve4(hostname: string, options: { ttl: false }, callback: (err?: DNSError, address?: string[]) => void): void;\n    resolve4(hostname: string, ...args: any[]): void {\n        const callback = args.pop();\n        this._resolver.resolve4(hostname, args[0]).then(v=>callback(undefined, v)).catch(e=>callback(e, undefined));\n    }\n\n    resolve6(hostname: string, callback: (err?: DNSError, address?: string[]) => void): void;\n    resolve6(hostname: string, options: { ttl: true }, callback: (err?: DNSError, address?: AAAARecord[]) => void): void;\n    resolve6(hostname: string, options: { ttl: false }, callback: (err?: DNSError, address?: string[]) => void): void;\n    resolve6(hostname: string, ...args: any[]): void {\n        const callback = args.pop();\n        this._resolver.resolve6(hostname, args[0]).then(v=>callback(undefined, v)).catch(e=>callback(e, undefined));\n    }\n\n    resolveAny(hostname: string, callback: (err?: DNSError, ret?: AnyDNSRecord[]) => void): void {\n        this._resolver.resolveAny(hostname).then(v=>callback(undefined, v)).catch(e=>callback(e, undefined));\n    }\n\n    resolveCaa(hostname: string, callback: (err?: DNSError, records?: { critical: number; iodef?: string; issue?: string }[]) => void): void {\n        this._resolver.resolveCaa(hostname).then(v=>callback(undefined, v)).catch(e=>callback(e, undefined));\n    }\n\n    resolveCname(hostname: string, callback: (err?: DNSError, addresses?: string[]) => void): void {\n        this._resolver.resolveCname(hostname).then(v=>callback(undefined, v)).catch(e=>callback(e, undefined));\n    }\n\n    resolveMx(hostname: string, callback: (err?: DNSError, addresses?: { priority: number; exchange: string }[]) => void): void {\n        this._resolver.resolveMx(hostname).then(v=>callback(undefined, v)).catch(e=>callback(e, undefined));\n    }\n\n    resolveNaptr(hostname: string, callback: (err?: DNSError, addresses?: NAPTRRecord[]) => void): void {\n        this._resolver.resolveNaptr(hostname).then(v=>callback(undefined, v)).catch(e=>callback(e, undefined));\n    }\n\n    resolveNs(hostname: string, callback: (err?: DNSError, addresses?: string[]) => void): void {\n        this._resolver.resolveNs(hostname).then(v=>callback(undefined, v)).catch(e=>callback(e, undefined));\n    }\n\n    resolvePtr(hostname: string, callback: (err?: DNSError, addresses?: string[]) => void): void {\n        this._resolver.resolvePtr(hostname).then(v=>callback(undefined, v)).catch(e=>callback(e, undefined));\n    }\n\n    resolveSoa(hostname: string, callback: (err?: DNSError, address?: SOARecord) => void): void {\n        this._resolver.resolveSoa(hostname).then(v=>callback(undefined, v)).catch(e=>callback(e, undefined));\n    }\n\n    resolveSrv(hostname: string, callback: (err?: DNSError, addresses?: SRVRecord[]) => void): void {\n        this._resolver.resolveSrv(hostname).then(v=>callback(undefined, v)).catch(e=>callback(e, undefined));\n    }\n\n    resolveTxt(hostname: string, callback: (err?: DNSError, records?: string[][]) => void): void {\n        this._resolver.resolveTxt(hostname).then(v=>callback(undefined, v)).catch(e=>callback(e, undefined));\n    }\n\n    reverse(hostname: string, callback: (err?: DNSError, hostnames?: string[]) => void): void {\n        this._resolver.reverse(hostname).then(v=>callback(undefined, v)).catch(e=>callback(e, undefined));\n    }\n\n    setLocalAddress(ipv4: string, ipv6: string): void {\n        this._resolver.setLocalAddress(ipv4, ipv6)\n    }\n\n    setServers(servers: string[]): void {\n        this._resolver.setServers(servers);\n    }\n}\n\nconst defaultResolver = new CallbackResolver();\nconst defaultPromiseResolver = new RFCResolver();\n\ntype LookupResult = { address: string, family: number };\n\nfunction lookupPromise(hostname: string, options?: 4 | 6 | { family: 4 | 6 | 0, hints?: number, all?: false, verbatim?: boolean }): Promise<LookupResult>;\nfunction lookupPromise(hostname: string, options: { family: 4 | 6 | 0, hints?: number, all: true, verbatim?: boolean }): Promise<LookupResult[]>;\nfunction lookupPromise(hostname: string, ...args: any[]): Promise<LookupResult | LookupResult[]> {\n    const options = args[0];\n    let family: number = options as number || 4;\n    let hints = 0; // Ignored, not supported\n    let all = false;\n    let verbatim = false; // Ignored, always false\n    if (typeof options === 'object') {\n        family = options.family || family;\n        hints = options.hints || hints;\n        all = options.all || all;\n        verbatim = options.verbatim || verbatim;\n    }\n    let promise = Promise.resolve([]);\n    if (family === 6 || family === 0) {\n        promise = defaultPromiseResolver.resolve(hostname, 'AAAA').then(r=>r.map((v: string)=>({address: v, family: 6})));\n    }\n\n    if (family === 4 || family === 0) {\n        promise = Promise.all([promise, defaultPromiseResolver.resolve(hostname, 'A').then(r=>r.map((v: string)=>({address: v, family: 4})))]).then(r=>r[0].concat(r[1]));\n    }\n\n    return promise.then(result=>{\n        if (result.length === 0) throw DNSError.NODATA;\n        return all ? result : result[0];\n    });\n}\n\nfunction lookupServicePromise(address: string, port: number): Promise<{hostname: string, service: string}> {\n    throw DNSError.NOTIMP;\n}\n\nfunction lookup(hostname: string, callback: LookupCallback): void;\nfunction lookup(hostname: string, options: 4 | 6 | { family: 4 | 6 | 0, hints?: number, all?: boolean, verbatim?: boolean }, callback: LookupCallback | LookupCallbackAll): void;\nfunction lookup(hostname: string, ...args: any[]): void {\n    const callback = args.pop();\n    lookupPromise(hostname, args[0]).then(result=>Array.isArray(result) ? callback(undefined, result) : callback(undefined, result.address, result.family)).catch(err=>callback(err));\n}\n\nfunction lookupService(address: string, port: number, callback: (err?: DNSError, hostname?: string, service?: string)=>void): void {\n    lookupServicePromise(address, port).then(v=>callback(undefined, v.hostname, v.service)).catch(e=>callback(e));\n}\n\nexport default {\n    ...constants,\n    Resolver: CallbackResolver,\n    promises: {\n        Resolver: RFCResolver,\n        lookup: lookupPromise,\n        lookupService: lookupServicePromise,\n        getServers: defaultPromiseResolver.getServers.bind(defaultPromiseResolver),\n        resolve: defaultPromiseResolver.resolve.bind(defaultPromiseResolver),\n        resolve4: defaultPromiseResolver.resolve4.bind(defaultPromiseResolver),\n        resolve6: defaultPromiseResolver.resolve6.bind(defaultPromiseResolver),\n        resolveAny: defaultPromiseResolver.resolveAny.bind(defaultPromiseResolver),\n        resolveCname: defaultPromiseResolver.resolveCname.bind(defaultPromiseResolver),\n        resolveCaa: defaultPromiseResolver.resolveCaa.bind(defaultPromiseResolver),\n        resolveMx: defaultPromiseResolver.resolveMx.bind(defaultPromiseResolver),\n        resolveNaptr: defaultPromiseResolver.resolveNaptr.bind(defaultPromiseResolver),\n        resolveNs: defaultPromiseResolver.resolveNs.bind(defaultPromiseResolver),\n        resolvePtr: defaultPromiseResolver.resolvePtr.bind(defaultPromiseResolver),\n        resolveSoa: defaultPromiseResolver.resolveSoa.bind(defaultPromiseResolver),\n        resolveSrv: defaultPromiseResolver.resolveSrv.bind(defaultPromiseResolver),\n        resolveTxt: defaultPromiseResolver.resolveTxt.bind(defaultPromiseResolver),\n        reverse: defaultPromiseResolver.reverse.bind(defaultPromiseResolver),\n        setServers: defaultPromiseResolver.setServers.bind(defaultPromiseResolver),\n    },\n    lookup,\n    lookupService,\n    getServers: defaultResolver.getServers.bind(defaultResolver),\n    resolve: defaultResolver.resolve.bind(defaultResolver),\n    resolve4: defaultResolver.resolve4.bind(defaultResolver),\n    resolve6: defaultResolver.resolve6.bind(defaultResolver),\n    resolveAny: defaultResolver.resolveAny.bind(defaultResolver),\n    resolveCname: defaultResolver.resolveCname.bind(defaultResolver),\n    resolveCaa: defaultResolver.resolveCaa.bind(defaultResolver),\n    resolveMx: defaultResolver.resolveMx.bind(defaultResolver),\n    resolveNaptr: defaultResolver.resolveNaptr.bind(defaultResolver),\n    resolveNs: defaultResolver.resolveNs.bind(defaultResolver),\n    resolvePtr: defaultResolver.resolvePtr.bind(defaultResolver),\n    resolveSoa: defaultResolver.resolveSoa.bind(defaultResolver),\n    resolveSrv: defaultResolver.resolveSrv.bind(defaultResolver),\n    resolveTxt: defaultResolver.resolveTxt.bind(defaultResolver),\n    reverse: defaultResolver.reverse.bind(defaultResolver),\n    setServers: defaultResolver.setServers.bind(defaultResolver),\n}\n"],"names":["constants.NODATA","constants.FORMERR","constants.SERVFAIL","constants.NOTFOUND","constants.NOTIMP","constants.REFUSED","constants.BADQUERY","constants.BADNAME","constants.BADFAMILY","constants.BADRESP","constants.CONNREFUSED","constants.TIMEOUT","constants.EOF","constants.FILE","constants.NOMEM","constants.DESTRUCTION","constants.BADSTR","constants.BADFLAGS","constants.NONAME","constants.BADHINTS","constants.NOTINITIALIZED","constants.LOADIPHLPAPI","constants.ADDRGETNETWORKPARAMS","constants.CANCELLED","RDATA","RFCResolver"],"mappings":"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"}